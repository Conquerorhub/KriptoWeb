@page "/admin/haberler/edit/{id:long}"
@page "/admin/haberler/create"
@inherits OwningComponentBase<WebNewsFinal.Models.DataContext>

<style>
    div.validation-message { color: rgb(220, 53, 69); font-weight: 500 }
</style>

<h3 class="admin-page-title">Haber @TitleText</h3>
<div class="admin-form-wrapper">
<EditForm Model="Haber" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator />
    @if (Haber.HaberId != 0)
    {
<div class="form-group">
    <label>ID</label>
    <input class="form-control" disabled value="@Haber.HaberId" />
</div>}
    <div class="form-group">
        <label>Haber Başlığı</label>
        <ValidationMessage For="@(() => Haber.baslik)" />
        <InputText class="form-control" @bind-Value="Haber.baslik" />
    </div>
    <div class="form-group">
        <label>İçerik</label>
        <ValidationMessage For="@(() => Haber.icerik)" />
        <InputTextArea class="form-control admin-text-area" @bind-Value="Haber.icerik" />
    </div>
    <div class="form-group">
        <label>Kategori</label>
        <InputSelect class="form-control show-tick" @bind-Value="Haber.KategoriId">
            @foreach (var item in Repository.Kategoriler)
            {
                <option value="@item.KategoriId">@item.baslik</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Resim</label>
        <ValidationMessage For="@(() => Haber.kapak_foto)" />
        <InputText class="form-control" @bind-Value="Haber.kapak_foto" />
        <img src="@Haber.kapak_foto" style="max-height: 300px;" />
    </div>

    <button type="submit" class="btn btn-@ThemeColor">Ekle</button>
    <NavLink class="btn btn-secondary" href="/admin/haberler">İptal</NavLink>
</EditForm>
</div>

@code {

    public WebNewsFinal.Models.DataContext Repository => Service;

    [Inject]
    public NavigationManager NavManager { get; set; }

    [Parameter]
    public long Id { get; set; } = 0;

    public Haber Haber { get; set; } = new Haber();

    protected override void OnParametersSet() {
        if (Id != 0) {
            Haber = Repository.Haberler.FirstOrDefault(h => h.HaberId == Id);
            kate_id = Haber.KategoriId.ToString();
        }
    }

    public void SaveProduct() {
        if (Id == 0) {
            long s = Haber.KategoriId;
            Haber.Kategori = Repository.Kategoriler.Where(x => x.KategoriId == s).FirstOrDefault();
            Haber.Kullanici = Repository.Kullanicilar.First();

            Repository.Add(Haber);
            Repository.SaveChanges();
        }
        else {
            Repository.Update(Haber);
            Repository.SaveChanges();
        }
        NavManager.NavigateTo("/admin/haberler");
    }

    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Oluştur" : "Edit";
    public string kate_id { get; set; }
}
